{"meta":{"title":"Jonny's Blog","subtitle":"Jonny","description":"技术笔记","author":"Jonny","url":"http://blog.first-blood.cn"},"pages":[{"title":"关于我","date":"2018-11-01T08:17:25.000Z","updated":"2018-11-01T09:18:43.658Z","comments":true,"path":"about/index.html","permalink":"http://blog.first-blood.cn/about/index.html","excerpt":"","text":"博主： JonnyQQ: 342418262擅长技术+ Java + Groovy"},{"title":"标签","date":"2018-11-01T08:20:47.000Z","updated":"2018-11-01T09:03:56.075Z","comments":false,"path":"tags/index.html","permalink":"http://blog.first-blood.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-01T08:21:09.000Z","updated":"2018-11-01T09:04:15.579Z","comments":false,"path":"categories/index.html","permalink":"http://blog.first-blood.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot中的slf4j日志依赖关系","slug":"SpringBoot中的slf4j日志依赖关系","date":"2018-11-09T03:23:36.677Z","updated":"2018-11-09T03:23:36.677Z","comments":true,"path":"2018/11/09/SpringBoot中的slf4j日志依赖关系/","link":"","permalink":"http://blog.first-blood.cn/2018/11/09/SpringBoot中的slf4j日志依赖关系/","excerpt":"","text":"SpringBoot底层使用的是slf4j+logback来进行日志记录 把其他common-logging、log4j、java.util.logging转换为slf4j 底层依赖关系 关系如何转化 底层通过偷梁换柱的方法，用jcl、jul、log4j中间转换包进行转化 如果要引入其他框架，必须将其中默认日志依赖剔除 SpringBoot从maven依赖中剔除springframework:spring-core中的common-logging 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.20.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; +++ SpringBoot默认日志级别为INFO级别 日志优先级从小到大顺序为： trace&lt;debug&lt;info&lt;warn&lt;error 12345678910111213141516171819202122232425package com.example.demo;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class DemoApplicationTests &#123; Logger log = LoggerFactory.getLogger(getClass()); @Test public void contextLoads() &#123; log.trace(\"trace日志\"); log.debug(\"debug日志\"); log.info(\"info日志\"); log.warn(\"warn日志\"); log.error(\"error日志\"); &#125;&#125; 启动运行，控制台打印只打印了info及以上级别 1232018-11-09 00:13:36.899 INFO 8156 --- [main] com.example.demo.DemoApplicationTests : info日志2018-11-09 00:13:36.900 WARN 8156 --- [main] com.example.demo.DemoApplicationTests : warn日志2018-11-09 00:13:36.900 ERROR 8156 --- [main] com.example.demo.DemoApplicationTests : error日志 日志基础配置 12345678910111213141516# 指定日志输入级别logging.level.com.example.demo=trace # 指定日志输出位置和日志文件名logging.file=./log/log.txt# 指定日志输出路径,若file和path同时配置,则file生效# 此配置默认生成文件为spring.log#logging.path=./log# 控制台日志输出格式# -5表示从左显示5个字符宽度logging.pattern.console=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %highlight(%-5level) %boldYellow(%thread) | %boldGreen(%logger) | %msg%n# 文件中输出的格式logging.pattern.file=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; = [%thread] = %-5level = %logger&#123;50&#125; - %msg%n","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"slf4j","slug":"slf4j","permalink":"http://blog.first-blood.cn/tags/slf4j/"},{"name":"logback","slug":"logback","permalink":"http://blog.first-blood.cn/tags/logback/"},{"name":"日志","slug":"日志","permalink":"http://blog.first-blood.cn/tags/日志/"},{"name":"log4j","slug":"log4j","permalink":"http://blog.first-blood.cn/tags/log4j/"},{"name":"common-logging","slug":"common-logging","permalink":"http://blog.first-blood.cn/tags/common-logging/"}]},{"title":"Windows中Google浏览器主页被恶意串改","slug":"Windows中Google浏览器主页被恶意串改","date":"2018-11-09T03:23:36.677Z","updated":"2018-11-09T03:23:36.677Z","comments":true,"path":"2018/11/09/Windows中Google浏览器主页被恶意串改/","link":"","permalink":"http://blog.first-blood.cn/2018/11/09/Windows中Google浏览器主页被恶意串改/","excerpt":"","text":"当我们打开浏览器的时候它自动打开了某某网站的首页，这个时候我们如果需要重新配置自己的主页，或者去掉它设置的主页，该怎么办呢？ 1、浏览器地址栏目输入chrome://version，查看命令行看看是否正常 很显然上图中的浏览器首页被篡改了，指向了后面的http地址 2、通过Google浏览器设置查看启动时是否指定了http开头的地址 你可以通过这个设置来修改，若无效，请接着往下看 3、打开Google浏览器目标位置，复制一份重命名，然后右键-发送到桌面快捷方式 4、双击打开测试看看，主页是不是进入到了你设置页面，若不是5、选中刚刚发送到桌面的快捷方式–单机右键–属性–目标–最后面先一个空格，然后加上命令行：1--flag-switches-begin --flag-switches-end 最后查看，已经修改过来了","categories":[{"name":"Windows","slug":"Windows","permalink":"http://blog.first-blood.cn/categories/Windows/"}],"tags":[{"name":"Google浏览器","slug":"Google浏览器","permalink":"http://blog.first-blood.cn/tags/Google浏览器/"},{"name":"浏览器","slug":"浏览器","permalink":"http://blog.first-blood.cn/tags/浏览器/"},{"name":"恶意篡改","slug":"恶意篡改","permalink":"http://blog.first-blood.cn/tags/恶意篡改/"}]},{"title":"Java如何实现延时访问","slug":"Java如何实现延时访问","date":"2018-11-08T10:26:21.121Z","updated":"2018-11-08T10:26:21.122Z","comments":true,"path":"2018/11/08/Java如何实现延时访问/","link":"","permalink":"http://blog.first-blood.cn/2018/11/08/Java如何实现延时访问/","excerpt":"","text":"调用某个方法后，我们需要程序过一段时间再去处理，就可以用多线程阻塞或Timer定时器来实现 方法一 多线程阻塞实现方式 MyTask12345678910111213141516171819202122232425262728package abc;import java.util.concurrent.*;public class MyTask implements Callable&lt;Integer&gt; &#123; private int num; private int price; public MyTask(int num, int price) &#123; this.num = num; this.price = price; &#125; public int add(int m, int n) &#123; System.out.println(\"执行运算...\"+\"\\n\"); return m * n; &#125; @Override public Integer call() throws Exception &#123; //睡眠5秒 Thread.sleep(5 * 1000L); return add(num,price); &#125;&#125; 测试类12345678910111213141516171819package abc;import org.junit.Test;import java.util.concurrent.FutureTask;public class ThreadTest &#123; @Test public void c() throws Exception &#123; MyTask task = new MyTask(10,20); FutureTask&lt;Integer&gt; resultObject = new FutureTask&lt;Integer&gt;(task); new Thread(resultObject).start(); //阻塞当前线程 int result = resultObject.get(); System.out.println(result); &#125;&#125; 方法二 通过Timer定时器实现 TestTimerTask1234567891011121314151617181920212223242526package abc;import java.util.Date;import java.util.TimerTask;public class TestTimerTask extends TimerTask &#123; private String username; private int age; public TestTimerTask(String username, int age) &#123; this.username = username; this.age = age; &#125; @Override public void run() &#123; // 处理业务逻辑 System.out.println(\"开始处理.\"); System.out.println(\"大家好，我叫\" + username + \"，今年\" + age + \"岁\"); System.out.println(\"结束时间：\"+new Date().toLocaleString()); System.gc(); cancel(); &#125;&#125; 测试类12345678910111213141516package abc;import java.util.Date;import java.util.Timer;public class TimerTest &#123; public static void main(String[] args) &#123; System.out.println(\"开始时间：\"+new Date().toLocaleString()); Timer timer = new Timer(); System.out.println(\"一：\"+timer); timer.schedule(new TestTimerTask(\"张三\",20),5000); System.out.println(timer); &#125;&#125; 输出结果12345678开始时间：2018-11-8 17:21:49一：java.util.Timer@6acbcfc0java.util.Timer@6acbcfc0开始处理.大家好，我叫张三，今年20岁结束时间：2018-11-8 17:21:54Process finished with exit code 0 注意 Timer测试不能用单元测试","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.first-blood.cn/tags/Java/"},{"name":"多线程","slug":"多线程","permalink":"http://blog.first-blood.cn/tags/多线程/"},{"name":"Callable","slug":"Callable","permalink":"http://blog.first-blood.cn/tags/Callable/"},{"name":"Timer","slug":"Timer","permalink":"http://blog.first-blood.cn/tags/Timer/"},{"name":"接口访问频率","slug":"接口访问频率","permalink":"http://blog.first-blood.cn/tags/接口访问频率/"}]},{"title":"SpringBoot配置Profile多环境支持","slug":"SpringBoot配置Profile多环境支持","date":"2018-11-08T02:12:30.431Z","updated":"2018-11-08T02:12:30.431Z","comments":true,"path":"2018/11/08/SpringBoot配置Profile多环境支持/","link":"","permalink":"http://blog.first-blood.cn/2018/11/08/SpringBoot配置Profile多环境支持/","excerpt":"","text":"Profile是Spring对不同环境提供不同配置功能的支持，可以通过不同需求激活指定环境配置1、多Profile文件定义形式 application-{profile}.properties或者application-{profile}.yml application-dev.properties 或application-dev.yml application-test.properties 或application-test.yml application-prod.properties 或application-prod.yml 2、多profile文档块形式1234567891011121314151617---server: port: 8080spring: profiles: prod---server: port: 8081spring: profiles: test ---server: port: 8082spring: profiles: dev 激活方式1、在yml或者properties中通过配置激活123spring: profiles: active: dev # 激活开发环境 2、命令行激活1--spring.profiles.active=dev 此命令式在IDEA中Program arguments输入框中设置 部署到本地激活方式 1java -jar demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod 3、JVM虚拟机参数激活 在IDEA中VM Options中输入框中设置 1-Dspring.profiles.active=dev 部署到本地激活方式 1java -jar -Dspring.profiles.active=test demo-0.0.1-SNAPSHOT.jar","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"Profile","slug":"Profile","permalink":"http://blog.first-blood.cn/tags/Profile/"},{"name":"多环境配置","slug":"多环境配置","permalink":"http://blog.first-blood.cn/tags/多环境配置/"}]},{"title":"SpringBoot配置文件优先级加载顺序","slug":"SpringBoot配置文件优先级加载顺序","date":"2018-11-08T02:12:30.431Z","updated":"2018-11-08T02:12:30.431Z","comments":true,"path":"2018/11/08/SpringBoot配置文件优先级加载顺序/","link":"","permalink":"http://blog.first-blood.cn/2018/11/08/SpringBoot配置文件优先级加载顺序/","excerpt":"","text":"配置文件优先级从高到低顺序↓ file:./config/ - 优先级最高（项目根路径下的config） file:./ - 优先级第二 -（项目根路径下） classpath:/config/ - 优先级第三（项目resources/config下） classpath:/ - 优先级第四（项目resources根目录） SpringBoot项目启动会去扫面项目以上目录位置的application.yml或application.properties文件 以上位置的application.yml或application.properties遵循： 高优先级配置会覆盖低优先级配置 多个配置文件互补 比如，两个同名文件里面有相同的配置，相同的配置会被高优先级的配置覆盖 A配置优先级大于B配置 12server: port: 8080 B配置优先级小于A配置 123server: port: 8081 context-path: /test 项目启动后访问地址为：http://localhost:8080/test，这就是所谓的互补 项目打包运行后可通过命令指定配置文件位置1--spring.config.location=d:/application.properties 实例 1java -jar demo-xxx.jar --spring.config.location=d:/application.properties 这对于运维来说非常方便，在不破坏原配置情况下轻松修改少量配置就可以达到想要的效果","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"配置","slug":"配置","permalink":"http://blog.first-blood.cn/tags/配置/"},{"name":"优先级","slug":"优先级","permalink":"http://blog.first-blood.cn/tags/优先级/"}]},{"title":"SpringBoot配置文件占位符","slug":"SpringBoot配置文件占位符","date":"2018-11-07T09:18:14.417Z","updated":"2018-11-07T09:18:14.417Z","comments":true,"path":"2018/11/07/SpringBoot配置文件占位符/","link":"","permalink":"http://blog.first-blood.cn/2018/11/07/SpringBoot配置文件占位符/","excerpt":"","text":"在properties或yaml配置文件中是可以使用占位符的 1、随机数 ${random.value} - 类似uuid的随机数，没有”-“连接 ${random.int} - 随机取整型范围内的一个值 ${random.long} - 随机取长整型范围内的一个值 ${random.long(100,200)} - 随机生成长整型100-200范围内的一个值 ${random.uuid} - 生成一个uuid，有短杠连接 ${random.int(10)} - 随机生成一个10以内的数 ${random.int(100,200)} - 随机生成一个100-200 范围以内的数 例子 1234567#user.username=$&#123;random.value&#125;#user.username=$&#123;random.int&#125;#user.username=$&#123;random.long&#125;#user.username=$&#123;random.uuid&#125;#user.username=$&#123;random.int(10)&#125;#user.username=$&#123;random.int(100,200)&#125;user.username=$&#123;random.long(100,200)&#125; 2、占位符 ${key:defaultValue} - 若key 不存在，则将defaultValue的值赋值给取值的对象 例子 ${user.username} 当在配置文件中用这个表达式，而user.username未定义的时候，取值时会将${user.username} 当做字符串处理 1user.username=$&#123;test.xx:周伯通&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"占位符","slug":"占位符","permalink":"http://blog.first-blood.cn/tags/占位符/"},{"name":"默认值","slug":"默认值","permalink":"http://blog.first-blood.cn/tags/默认值/"},{"name":"SpEL","slug":"SpEL","permalink":"http://blog.first-blood.cn/tags/SpEL/"}]},{"title":"SpringBoot中@PropertySource和@ImportResource以及@Bean","slug":"SpringBoot中@PropertySource和@ImportResource以及@Bean","date":"2018-11-07T07:29:42.263Z","updated":"2018-11-07T07:32:42.682Z","comments":true,"path":"2018/11/07/SpringBoot中@PropertySource和@ImportResource以及@Bean/","link":"","permalink":"http://blog.first-blood.cn/2018/11/07/SpringBoot中@PropertySource和@ImportResource以及@Bean/","excerpt":"","text":"@PropertySource 加载指定的配置文件 只能加载*.properties文件，不能加载yaml文件 新建一个user.properties 123456user.nickname=张三user.age=19user.sex=男user.maps.weight=70user.maps.height=170user.address.addr=重庆市渝中区 UserBean 123456789101112131415@Component@PropertySource(value = &#123;\"classpath:user.properties\"&#125;)@ConfigurationProperties(prefix = \"user\")public class User &#123; private String nickname; private Integer age; private char sex; private Map&lt;String,Integer&gt; maps; private Address address; ...&#125; @ImportResource 导入Spring的配置文件，让配置文件里面的内容生效 SpringBoot中编写的Spring配置文件是不能自动识别的 在主配置类上加入@ImportResource 1@ImportResource(locations = &#123;\"classpath:beans.xml\"&#125;) SpringBoot给容器添加组件的方式1、配置类 == Spring配置文件 通过@Configuration声明2、使用@Bean给容器添加组件，组件id默认为方法名例子1234567891011121314package com.atgenee.demo.service;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class Hello &#123; @Bean public Hello helloService() &#123; System.out.println(\"添加组件\"); return new Hello(); &#125;&#125; 测试1234567891011121314151617181920212223242526272829package com.atgenee.demo;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.context.ApplicationContext;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class HelloServiceApplicationTests &#123; // @Autowired// private Hello hello;//// @Test// public void hello() &#123;// hello.helloService();// &#125; @Autowired private ApplicationContext ioc; @Test public void hello() &#123; ioc.getBean(\"helloService\"); &#125;&#125; 请注意 若配置类已经加了@Bean注解，此时配置类中的方法名不能跟类名一样，也就是上面的Hello类中不能定义hello()的方法，否则报错 通过自定义工厂来实现自定义yaml文件加载新建一个cat.yml文件1234cat: age: 3 height: 20 weight: 5 工厂类12345678910111213141516171819202122232425262728293031323334353637package com.atgenee.demo.factory;import java.io.FileNotFoundException;import java.io.IOException;import java.util.Properties;import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;import org.springframework.core.env.PropertiesPropertySource;import org.springframework.core.env.PropertySource;import org.springframework.core.io.support.EncodedResource;import org.springframework.core.io.support.PropertySourceFactory;import org.springframework.lang.Nullable;public class YamlPropertySourceFactory implements PropertySourceFactory &#123; @Override public PropertySource&lt;?&gt; createPropertySource(@Nullable String name, EncodedResource resource) throws IOException &#123; Properties propertiesFromYaml = loadYamlIntoProperties(resource); String sourceName = name != null ? name : resource.getResource().getFilename(); return new PropertiesPropertySource(sourceName, propertiesFromYaml); &#125; private Properties loadYamlIntoProperties(EncodedResource resource) throws FileNotFoundException &#123; try &#123; YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean(); factory.setResources(resource.getResource()); factory.afterPropertiesSet(); return factory.getObject(); &#125; catch (IllegalStateException e) &#123; // for ignoreResourceNotFound Throwable cause = e.getCause(); if (cause instanceof FileNotFoundException) throw (FileNotFoundException) e.getCause(); throw e; &#125; &#125;&#125; 新建配置类 Cat，配合@PropertySource 注解使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.atgenee.demo.config;import com.atgenee.demo.factory.YamlPropertySourceFactory;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.context.annotation.PropertySource;import org.springframework.stereotype.Component;@Component@PropertySource(factory = YamlPropertySourceFactory.class, value = \"classpath:cat.yml\")@ConfigurationProperties(prefix = \"cat\")public class Cat &#123; private int age; private Double weight; private Double height; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public Double getWeight() &#123; return weight; &#125; public void setWeight(Double weight) &#123; this.weight = weight; &#125; public Double getHeight() &#123; return height; &#125; public void setHeight(Double height) &#123; this.height = height; &#125; @Override public String toString() &#123; return \"Cat&#123;\" + \"age=\" + age + \", weight=\" + weight + \", height=\" + height + '&#125;'; &#125;&#125; Cat测试类12345678910111213141516171819202122package com.atgenee.demo;import com.atgenee.demo.config.Cat;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class CatApplicationTests &#123; @Autowired private Cat cat; @Test public void hei() &#123; System.out.println(cat); &#125;&#125; 控制台输出1Cat&#123;age=3, weight=5.0, height=20.0&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"yaml","slug":"yaml","permalink":"http://blog.first-blood.cn/tags/yaml/"},{"name":"yml","slug":"yml","permalink":"http://blog.first-blood.cn/tags/yml/"},{"name":"自定义yml","slug":"自定义yml","permalink":"http://blog.first-blood.cn/tags/自定义yml/"},{"name":"自定义yaml","slug":"自定义yaml","permalink":"http://blog.first-blood.cn/tags/自定义yaml/"},{"name":"自定义properties","slug":"自定义properties","permalink":"http://blog.first-blood.cn/tags/自定义properties/"}]},{"title":"SpringBoot单元测试","slug":"SpringBoot单元测试","date":"2018-11-07T07:29:42.263Z","updated":"2018-11-07T07:29:42.263Z","comments":true,"path":"2018/11/07/SpringBoot单元测试/","link":"","permalink":"http://blog.first-blood.cn/2018/11/07/SpringBoot单元测试/","excerpt":"","text":"在测试类中读取某个application-开头的properties或yaml中的属性命名规则 必须以application-开头 application-dev.properties application-test.properties application-dev.yml application-dev.yml 通过@ActiveProfiles来指定使用哪个文件 例子12345678910111213141516171819202122232425262728package com.atgenee.demo;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest@ActiveProfiles(\"test\") //指定使用application-test.ymlpublic class TestApplicationTests &#123; @Value(\"$&#123;user.first-name&#125;\") private String firstName; @Value(\"$&#123;user.weight&#125;\") private Integer weight; @Test public void hei() &#123; System.out.println(firstName); System.out.println(weight); &#125;&#125; @TestPropertySource 加载指定配置文件 可以是properties文件，也可以是yaml 例子123456789101112131415161718192021222324252627package com.atgenee.demo;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.TestPropertySource;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTest@TestPropertySource(properties = &#123; \"spring.config.location = classpath:test.properties\" &#125;)public class TestApplicationTests &#123; @Value(\"$&#123;user.first-name&#125;\") private String firstName; @Value(\"$&#123;user.weight&#125;\") private Integer weight; @Test public void hei() &#123; System.out.println(firstName); System.out.println(weight); &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"yaml","slug":"yaml","permalink":"http://blog.first-blood.cn/tags/yaml/"},{"name":"yml","slug":"yml","permalink":"http://blog.first-blood.cn/tags/yml/"},{"name":"自定义yml","slug":"自定义yml","permalink":"http://blog.first-blood.cn/tags/自定义yml/"},{"name":"自定义yaml","slug":"自定义yaml","permalink":"http://blog.first-blood.cn/tags/自定义yaml/"},{"name":"自定义properties","slug":"自定义properties","permalink":"http://blog.first-blood.cn/tags/自定义properties/"}]},{"title":"yaml基本语法","slug":"yaml用法","date":"2018-11-06T08:57:44.717Z","updated":"2018-11-06T08:57:44.717Z","comments":true,"path":"2018/11/06/yaml用法/","link":"","permalink":"http://blog.first-blood.cn/2018/11/06/yaml用法/","excerpt":"","text":"YAML用法 对象或键值对 1、普通用法123user: name: zhangsan age: 20 2、行内用法1user: &#123;name: zhangsan,age: 20&#125; 数组 1、普通用法1234pets: - pig - dog - cat 2、行内写法1ptes: [pig,dog,cat]","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"yaml","slug":"yaml","permalink":"http://blog.first-blood.cn/tags/yaml/"},{"name":"yml","slug":"yml","permalink":"http://blog.first-blood.cn/tags/yml/"},{"name":"application.yml","slug":"application-yml","permalink":"http://blog.first-blood.cn/tags/application-yml/"},{"name":"application.properties","slug":"application-properties","permalink":"http://blog.first-blood.cn/tags/application-properties/"}]},{"title":"windows以管理员运行快捷方式","slug":"windows以管理员运行快捷方式","date":"2018-11-06T08:57:44.716Z","updated":"2018-11-06T08:57:44.716Z","comments":true,"path":"2018/11/06/windows以管理员运行快捷方式/","link":"","permalink":"http://blog.first-blood.cn/2018/11/06/windows以管理员运行快捷方式/","excerpt":"","text":"Windows通过右键菜单，快捷打开CMD(Admin)窗口 创建一个后缀为.reg的文件，将下面的内容复制复制到该文件中 12345678910111213141516171819202122Windows Registry Editor Version 5.00; Created by: Shawn Brink; http://www.sevenforums.com; Tutorial: http://www.sevenforums.com/tutorials/47415-open-command-window-here-administrator.html[-HKEY_CLASSES_ROOT\\Directory\\shell\\runas][HKEY_CLASSES_ROOT\\Directory\\shell\\runas]@=&quot;Open CMD&quot;&quot;HasLUAShield&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\\Directory\\shell\\runas\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;[-HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\runas][HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\runas]@=&quot;Open CMD&quot;&quot;HasLUAShield&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\runas\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot;[-HKEY_CLASSES_ROOT\\Drive\\shell\\runas][HKEY_CLASSES_ROOT\\Drive\\shell\\runas]@=&quot;Open CMD&quot;&quot;HasLUAShield&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\\Drive\\shell\\runas\\command]@=&quot;cmd.exe /s /k pushd \\&quot;%V\\&quot;&quot; 最后双击添加到注册表中","categories":[{"name":"Windows技巧","slug":"Windows技巧","permalink":"http://blog.first-blood.cn/categories/Windows技巧/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://blog.first-blood.cn/tags/Windows/"},{"name":"bat","slug":"bat","permalink":"http://blog.first-blood.cn/tags/bat/"}]},{"title":"SpringBoot读取yaml配置","slug":"SpringBoot读取yaml配置","date":"2018-11-06T08:57:44.714Z","updated":"2018-11-06T09:31:57.644Z","comments":true,"path":"2018/11/06/SpringBoot读取yaml配置/","link":"","permalink":"http://blog.first-blood.cn/2018/11/06/SpringBoot读取yaml配置/","excerpt":"","text":"SpringBoot读取yaml配置的值 在application.yml中添加配置 1234567891011121314user: name: 张三 age: 19 sex: 男 maps: &#123;weight: 70,height: 170&#125; address: addr: 重庆市渝中区 lists: - 京东 - 淘宝 - 坑多多 新建Address类 123456789101112131415161718192021package com.atgenee.demo.config;public class Address &#123; private String addr; public String getAddr() &#123; return addr; &#125; public void setAddr(String addr) &#123; this.addr = addr; &#125; @Override public String toString() &#123; return \"Address&#123;\" + \"addr='\" + addr + '\\'' + '&#125;'; &#125;&#125; 新建User类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package com.atgenee.demo.config;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import java.util.List;import java.util.Map;@Component@ConfigurationProperties(prefix = \"user\")public class User &#123; private String name; private Integer age; private char sex; private Map&lt;String,Integer&gt; maps; private Address address; private List&lt;String&gt; lists; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public Integer getAge() &#123; return age; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public char getSex() &#123; return sex; &#125; public void setSex(char sex) &#123; this.sex = sex; &#125; public Map&lt;String, Integer&gt; getMaps() &#123; return maps; &#125; public void setMaps(Map&lt;String, Integer&gt; maps) &#123; this.maps = maps; &#125; public Address getAddress() &#123; return address; &#125; public void setAddress(Address address) &#123; this.address = address; &#125; public List&lt;String&gt; getLists() &#123; return lists; &#125; public void setLists(List&lt;String&gt; lists) &#123; this.lists = lists; &#125; @Override public String toString() &#123; return \"User&#123;\" + \"name='\" + name + '\\'' + \", age=\" + age + \", sex=\" + sex + \", maps=\" + maps + \", address=\" + address + \", lists=\" + lists + '&#125;'; &#125;&#125; 新建测试类1234567891011121314151617181920212223package com.atgenee.demo;import com.atgenee.demo.config.User;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class UserApplicationTests &#123; //注入配置类 @Autowired User user; @Test public void contextLoads() &#123; System.out.println(user); &#125;&#125; 测试结果1User&#123;name='Administrator', age=19, sex=男, maps=&#123;weight=70, height=170&#125;, address=Address&#123;addr='重庆市渝中区'&#125;, lists=[京东, 淘宝, 坑多多]&#125; 注意 yaml格式要求严格，以键值形式配置，键后冒号后面的空格一定不要丢（如: username: admin） @ConfigurationProperties注解依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://blog.first-blood.cn/tags/SpringBoot/"},{"name":"yaml","slug":"yaml","permalink":"http://blog.first-blood.cn/tags/yaml/"},{"name":"yml","slug":"yml","permalink":"http://blog.first-blood.cn/tags/yml/"},{"name":"application.yml","slug":"application-yml","permalink":"http://blog.first-blood.cn/tags/application-yml/"},{"name":"application.properties","slug":"application-properties","permalink":"http://blog.first-blood.cn/tags/application-properties/"}]},{"title":"nginx配置proxy_pass后，访问时路径丢失怎么办","slug":"nginx配置proxy_pass后，访问时路径丢失怎么办","date":"2018-11-01T09:40:38.916Z","updated":"2018-11-01T09:42:42.636Z","comments":true,"path":"2018/11/01/nginx配置proxy_pass后，访问时路径丢失怎么办/","link":"","permalink":"http://blog.first-blood.cn/2018/11/01/nginx配置proxy_pass后，访问时路径丢失怎么办/","excerpt":"","text":"应用场景 当我访问blog.first-blood.cn的时候，proxy_pass转发到jonny023.github.io这个域名下去了，而jonny023.github.io/upload/hello.jpg这个文件我通过blog.first-blood.cn/upload/hello.jpg访问就出现404 解决办法 此时在nginx的配置文件下的location配置下面添加一句 1proxy_set_header Host jonny023.github.io; 注意知道对不对，如果不对请来砍我1234567891011121314151617181920212223242526272829303132333435363738server &#123; listen 80; server_name blog.first-blood.cn; charset utf-8,gbk; root html; index index.html index.htm; location / &#123; proxy_set_header Host jonny023.github.io; #proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass https://jonny023.github.io; &#125; location ^~/archives/ &#123; proxy_pass https://jonny023.github.io/archives/; &#125; location ^~/uploads/ &#123; proxy_pass https://jonny023.github.io/uploads/; &#125; location /favico.ico &#123; proxy_pass https://jonny023.github.io; charset utf-8,gbk; expires 12h; &#125; location ~ .*\\.(js|css|eot|otf|ttf|woff|woff2)?$ &#123; proxy_pass https://jonny023.github.io; charset utf-8,gbk; expires 12h; &#125; location ~* \\.(eot|otf|ttf|woff|woff2)$ &#123; add_header Access-Control-Allow-Origin *; &#125;&#125;","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.first-blood.cn/categories/运维/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://blog.first-blood.cn/tags/Nginx/"}]},{"title":"StringUtils工具包join方法转字符","slug":"StringUtils工具包join方法转字符","date":"2018-11-01T07:36:36.429Z","updated":"2018-11-01T08:52:24.924Z","comments":true,"path":"2018/11/01/StringUtils工具包join方法转字符/","link":"","permalink":"http://blog.first-blood.cn/2018/11/01/StringUtils工具包join方法转字符/","excerpt":"","text":"作用 将集合、数组元素通过指定字符连接为一个字符串 StringUtils.join()跟JDK1.8里面的String.join()差不多 依赖12345&lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt;&lt;/dependency&gt; 具体代码123456789101112131415161718public static void main(String[] args) &#123; List list = new ArrayList(); list.add(\"市场\"); list.add(\"销售\"); list.add(\"运维\"); // 集合 String str = StringUtils.join(list,\",\"); System.out.println(str); // 数组 Object[] arrs = &#123;10010,10011,10086,10000&#125;; String s = StringUtils.join(arrs,\",\"); System.out.println(s);&#125; 执行结果 注意 StringUtils转数组的时候，只能是Object类型的数组","categories":[{"name":"后端","slug":"后端","permalink":"http://blog.first-blood.cn/categories/后端/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.first-blood.cn/tags/Java/"}]},{"title":"Oracle case when then分组排序","slug":"Oracle case when then分组排序","date":"2018-11-01T06:00:35.058Z","updated":"2018-11-06T08:57:44.713Z","comments":true,"path":"2018/11/01/Oracle case when then分组排序/","link":"","permalink":"http://blog.first-blood.cn/2018/11/01/Oracle case when then分组排序/","excerpt":"","text":"问题描述 Oracle数据库使用case when then end别名后，group by不能使用这个别名，但是order by可以 使用函数 TO_CHAR( SYSDATE, &#39;yyyy&#39; )作用是获取系统时间年份 EXTRACT( year FROM DATE_CREATED )作用是获取表字段年份 示例代码1234567891011121314151617181920SELECT COUNT( * ) AS rs,CASE WHEN TO_CHAR( SYSDATE, &apos;yyyy&apos; ) - TO_CHAR( NAT_DATE, &apos;yyyy&apos; ) &lt; 18 THEN &apos;17岁及其以下&apos; END nFROM PERSON_INFO WHERE EXTRACT( year FROM DATE_CREATED ) = &apos;2018&apos; AND person_status = 0GROUP BY CASE WHEN TO_CHAR( SYSDATE, &apos;yyyy&apos; ) - TO_CHAR( NAT_DATE, &apos;yyyy&apos; ) &lt; 18 THEN &apos;17岁及其以下&apos; ENDORDER BY n 目前解决方案是分组时直接使用case when then end完整代码，若有大佬有其他解决方案，请联系我，Thanks!","categories":[{"name":"数据库","slug":"数据库","permalink":"http://blog.first-blood.cn/categories/数据库/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://blog.first-blood.cn/tags/Oracle/"}]},{"title":"nginx本地域名映射及tomcat集群session共享","slug":"nginx本地域名映射及tomcat集群session共享","date":"2018-10-26T08:34:00.483Z","updated":"2018-11-01T08:52:02.221Z","comments":true,"path":"2018/10/26/nginx本地域名映射及tomcat集群session共享/","link":"","permalink":"http://blog.first-blood.cn/2018/10/26/nginx本地域名映射及tomcat集群session共享/","excerpt":"","text":"本地域名映射 修改C:\\Windows\\System32\\drivers\\etc下的hosts文件，在hosts中添加 1127.0.0.1 www.cms.com nginx配置集群配置 修改nginx.conf文件 1234567891011121314151617181920http &#123; upstream local &#123; server 127.0.0.1:8889; server 127.0.0.1:8880; ip_hash; # 解决session共享问题 &#125; server &#123; listen 80; server_name localhost; location / &#123; charset utf-8,gbk; # 解决中文乱码问题。 proxy_pass http://local; &#125; &#125; &#125;","categories":[{"name":"运维","slug":"运维","permalink":"http://blog.first-blood.cn/categories/运维/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://blog.first-blood.cn/tags/Nginx/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://blog.first-blood.cn/tags/Tomcat/"},{"name":"Tomcat集群","slug":"Tomcat集群","permalink":"http://blog.first-blood.cn/tags/Tomcat集群/"}]}]}